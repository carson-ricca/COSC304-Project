const express = require('express');
const router = express.Router();
const sql = require('mssql');
const moment = require('moment');
const customer = require('../utils/customer');

router.get('/', function (req, res, next) {

    let productList = false;
    if (req.session.productList && req.session.productList.length > 0) {
        productList = req.session.productList;
    }

    if(!productList){
        res.render('checkout', {
            title: 'Grocery CheckOut Line',
            invalid: 'No Product in the Shopping Cart!'
        });
        return;
    }

    productList = productList.filter(function (el) {
        return el != null;
    });

    let customerId = false;
    let customerPass = false;

    if (req.query.customerId && req.query.customerPass) {
        customerId = req.query.customerId;
        customerPass = req.query.customerPass;
    }

    customer.validateUserPass(customerId, customerPass).then(function (customerId) {
        if (customerId === -1) {
            res.render('checkout', {
                title: 'Grocery CheckOut Line',
                invalid: 'Invalid User ID or Password!'
            });
            return;
        }

        const time = new Date(Date.now());
        const date = `${time.getFullYear()}-${time.getMonth()}-${time.getDay()} ${time.getHours()}:${time.getMinutes()}:${time.getSeconds()}`;
        let totalAmount = 0;
        for (let i = 0; i < productList.length; i++) {
            if (productList[i] == null) continue;
            productList[i].price = parseFloat(productList[i].price);
            totalAmount += productList[i].price * productList[i].quantity;
            productList[i].totalAmount = totalAmount;
        }

        (async function f() {
            let pool = await sql.connect(dbConfig);

            // Create order summary
            const query = `INSERT INTO ordersummary (orderDate, totalAmount, customerId) VALUES (@date, @totalAmount, @customerId); SELECT SCOPE_IDENTITY();`;
            let result = await pool.request()
                .input('date', sql.DateTime, time)
                .input('totalAmount', sql.Int, totalAmount)
                .input('customerId', sql.Int, customerId)
                .query(query);
            let orderSummaryId = result.recordset[0][''];

            // Create order products
            for (let i = 0; i < productList.length; i++) {
                if (productList[i] == null) continue;
                const query = `INSERT INTO orderproduct (orderId, productId, quantity, price) VALUES (@orderId, @productId, @quantity, @price)`;
                let result = await pool.request()
                    .input('orderId', sql.Int, orderSummaryId)
                    .input('productId', sql.Int, productList[i].id)
                    .input('quantity', sql.Int, productList[i].quantity)
                    .input('price', sql.Int, productList[i].price*productList[i].quantity)
                    .query(query);
            }

            req.session.productList = [];
            res.render('order', {
                productList: productList,
                orderId: orderSummaryId,
                userId: customerId,
            });
        })();

    });

    /**
     Determine if valid customer id was entered
     Determine if there are products in the shopping cart
     If either are not true, display an error message
     **/

    /** Make connection and validate **/

    /** Save order information to database**/


    /**
     // Use retrieval of auto-generated keys.
     sqlQuery = "INSERT INTO <TABLE> OUTPUT INSERTED.orderId VALUES( ... )";
     let result = await pool.request()
     .input(...)
     .query(sqlQuery);
     // Catch errors generated by the query
     let orderId = result.recordset[0].orderId;
     **/

    /** Insert each item into OrderedProduct table using OrderId from previous INSERT **/

    /** Update total amount for order record **/

    /** For each entry in the productList is an array with key values: id, name, quantity, price **/

    /**
     for (let i = 0; i < productList.length; i++) {
            let product = products[i];
            if (!product) {
                continue;
            }
            // Use product.id, product.name, product.quantity, and product.price here
        }
     **/

    /** Print out order summary **/

    /** Clear session/cart **/
});

module.exports = router;
